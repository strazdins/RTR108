/* Čūska papildināta ar sevis sadurmsi, augli, sākuma un pauzes ekrānu.*/


/*
int PIN_SCE = 7 ; //SS
int PIN_RESET = 6;
int PIN_DC = 5; // data
int PIN_SDIN = 11 ; //MOSI SIMO
int PIN_SCLK =13 ; //CLK SCLK
int PIN_BL =9 ; //BL LED
int PIN_VCC =4 ; //Vcc +-
*/
int PIN_SCE = 6; //SS
int PIN_RESET = 7;
int PIN_DC = 5; // data
int PIN_SDIN = 4 ; //MOSI SIMO
int PIN_SCLK =3 ; //CLK SCLK
int PIN_BL =9 ; //BL LED
int PIN_VCC =2 ; //Vcc +-
int PIN_LED = 13; // LED PIN

char screen;
unsigned char start_delay = 1; 


////////////////////////////////////////////////////////// button states
bool state_L = false, state_R = false, state_U = false, state_D = false;
bool flag = false, skip = true;
char n = 2;
char egg_izskats[3];
int rand_y;
int kk;

/*#define BUTTON_D 8
#define BUTTON_U 9
#define BUTTON_L 10
#define BUTTON_R 11
*/
#define BUTTON_D 11
#define BUTTON_U 10
#define BUTTON_L 8
#define BUTTON_R 9
#define LCD_C LOW //command
#define LCD_D HIGH //data high command low.
#define LCD_X 84 ///character area //
#define LCD_Y 48 //consists of banks of 7 by eight pixels.//
#define LCD_DATA 1
#define Button_M 12

/*void fruit()
{
  for(int skaits = 0; skaits < 504; skaits ++)
  {
    fruit_array[skaits] = 0x00;
  }
}
*/


void posmarker()
{LcdWrite( 0, 0x80|0); LcdWrite( 0, 0x40|0);}

void LcdClear(void)
{for(int index = 0; index < 504; index++){LcdWrite(LCD_D, 0x00);}}

void LcdWrite(byte dc, byte data) {digitalWrite(PIN_DC, dc); digitalWrite(PIN_SCE, LOW); shiftOut(PIN_SDIN, PIN_SCLK,MSBFIRST, data); digitalWrite(PIN_SCE, HIGH);}
void initialise()
{pinMode(PIN_VCC, OUTPUT);
pinMode(PIN_SCE, OUTPUT); pinMode(PIN_RESET, OUTPUT); pinMode(PIN_DC, OUTPUT);
pinMode(PIN_SDIN, OUTPUT); pinMode(PIN_SCLK, OUTPUT); pinMode(PIN_BL, OUTPUT);
digitalWrite(PIN_VCC, HIGH);
digitalWrite(PIN_RESET, LOW); digitalWrite(PIN_RESET, HIGH);
LcdWrite(0, 0x21); //Tell LCD that extended commands follow
LcdWrite(0, 0xBF); //Set LCD Vop (Contrast): Try 0xB1(good @ 3.3V) or 0xBF if your display is too dark
LcdWrite(0, 0x04); //Set Temp coefficent
LcdWrite(0, 0x13); //LCD bias mode 1:48: Try 0x13 or 0x14
LcdWrite(0, 0x20); //We must send 0x20 before modifying the display control mode
LcdWrite(0, 0x0C); //Set display control, normal mode. 0x0D for inverse
//digitalWrite(PIN_BL, HIGH);
}

void position(char x2,char y2)
{
//maina tekosho kursora poziciju uz x2,y2
LcdWrite( 0, 0x80|x2);LcdWrite( 0, 0x40|y2);
}
void kursorsp(char x_, char y_, unsigned char X)
{
//ziimee 2px platu kursoru X poziicijaas x (0-83),y (0-23)
//LcdWrite( 0, 0x80|x_);
//LcdWrite( 0, 0x40|y_>>2);//tas ir y/4 to var saprast ja uzraksta skaitli binaari
position(x_,y_>>2);
digitalWrite(PIN_DC,HIGH);
digitalWrite(PIN_SCE, LOW);
shiftOut(PIN_SDIN, PIN_SCLK, MSBFIRST,X);
shiftOut(PIN_SDIN, PIN_SCLK, MSBFIRST,X);//lai linija buut biezaaka attelosim to 2px platu
digitalWrite(PIN_SCE, HIGH);
}
unsigned char atlikums;
void kursorspp2(char x_, char y_, char dir)//parvietoshana pa y chuskai ()
{
//speciaals chuskas kursors 2px liels parvietojas pa kolonnu

unsigned char kursora_izskats[4] = {0x3,0xF,0x3F,0xFF};
atlikums = y_%4;
if(dir==-1)//ja iet pa y uz augshu
{
//{atlikums = (~atlikums)&3;}
kursora_izskats[0] = 0xFF;kursora_izskats[1] = 0xFC;kursora_izskats[2] = 0xF0;kursora_izskats[3] =
0xc0;
}
else if(dir==0) //ja parvietojas pa x
{
kursora_izskats[0]=0x3;
kursora_izskats[1]=0x3<<2;
kursora_izskats[2]=0x3<<4;
kursora_izskats[3] = 0x3<<6;
}
position(x_,y_>>2);
digitalWrite(PIN_DC,HIGH);
digitalWrite(PIN_SCE, LOW);
shiftOut(PIN_SDIN, PIN_SCLK, MSBFIRST,kursora_izskats[atlikums]);
shiftOut(PIN_SDIN, PIN_SCLK, MSBFIRST,kursora_izskats[atlikums]);
digitalWrite(PIN_SCE, HIGH);
}

void setup()
{
initialise(); 
LcdClear();
posmarker();
pinMode(BUTTON_L,INPUT);
pinMode(BUTTON_R,INPUT);
pinMode(BUTTON_D, INPUT);
pinMode(BUTTON_U,INPUT);
digitalWrite(BUTTON_L,HIGH);
digitalWrite(BUTTON_R,HIGH);
digitalWrite(BUTTON_D, HIGH);
digitalWrite(BUTTON_U,HIGH);
pinMode(LED_BUILTIN, OUTPUT);
pinMode(PIN_LED, OUTPUT);
digitalWrite(PIN_LED, LOW);
pinMode(Button_M, INPUT);
digitalWrite(Button_M, HIGH); 
screen = 0;
flag = false;
Serial.begin(9600);
char state = LOW;
for(char led=0; led<5; led++)
{
  state = !state;
  digitalWrite(PIN_LED, state);
  delay(100);
}
digitalWrite(PIN_LED, LOW);
}


int x = 0, dx=0;
int egg_x = 0, egg_y = 0;
int y = 0, dy=0;
unsigned char 
px[100]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
py[100]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

unsigned char ZZ;
unsigned char garums = 5;
unsigned char start_value = garums;
unsigned char i;



void egg()
{
  // izskats sektorā
  int rand_x = random(0, 83);
  rand_y = random(0, 3);
  int rand_yy = random(0, 23);

  if (rand_yy%4 == 0)
  {
    egg_y = egg_y+2;
  }
  Serial.println(egg_y);
  
  egg_izskats[0] = 0x3;
  egg_izskats[1] = 0x3>>2;
  egg_izskats[2] = 0x3>>4;
  egg_izskats[3] = 0x3>>6;


  egg_y = rand_yy;
  egg_x = rand_x;
}

void spawn_egg()
{
  kursorsp(px[0],py[0],0x00);
  kursorspp2(egg_x,egg_y,0);
  //position(egg_x,egg_y>>2);
  digitalWrite(PIN_DC,HIGH);
  digitalWrite(PIN_SCE, LOW);
  shiftOut(PIN_SDIN, PIN_SCLK, MSBFIRST,egg_izskats[1]);
  //shiftOut(PIN_SDIN, PIN_SCLK, MSBFIRST,egg_izskats[1]);
  digitalWrite(PIN_SCE, HIGH);
}



void loop(){
char buttonstate_M = digitalRead(Button_M);
if (screen == 0) // 0
  {
  kursorsp(px[0],py[0],0x00);
  position(0,0);
  digitalWrite(PIN_DC,HIGH);
  digitalWrite(PIN_SCE, LOW);

  const unsigned char Bitmap[] = { 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xe0, 0xe0, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0xf0, 0xf0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0xf0, 0xe0, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xf0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0x80, 0xc0, 0xe0, 0x70, 0x10, 0x00, 0xf8, 0xf8, 0x88, 0x98, 0x88, 0x98, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x31, 0x31, 0x21, 0x33, 0x33, 0x1e, 0x0c, 0x20, 0x3f, 0x04, 0x01, 0x03, 0x06, 0x0c, 0x18, 0x3d, 0x3f, 0x00, 0x3c, 0x1e, 0x07, 0x07, 0x06, 0x0f, 0x3f, 0x30, 0x00, 0x00, 0x7f, 0x7f, 0x0f, 0x1d, 0x18, 0x30, 0x20, 0x02, 0x3f, 0x35, 0x21, 0x31, 0x31, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0x11, 0x11, 0x11, 0x0a, 0x04, 0x00, 0xff, 0x31, 0x71, 0xd1, 0x99, 0x0e, 0x00, 0x00, 0xff, 0x21, 0x21, 0x01, 0x00, 0x00, 0x00, 0x3f, 0x21, 0x21, 0xe1, 0x00, 0x00, 0x3f, 0x21, 0x21, 0xe1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0xff, 0x01, 0x01, 0x00, 0xff, 0x01, 0x01, 0x01, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x11, 0x11, 0x11, 0x0a, 0x04, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0x11, 0x10, 0x11, 0xff, 0x00, 0x01, 0x02, 0x04, 0xfc, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x02, 0x00, 0x00, 0x03, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x02, 0x02, 0x02, 0x03, 0x00, 0x00, 0x02, 0x02, 0x02, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x02, 0x02, 0x02, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x02, 0x02, 0x02, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  };
  for (int indexx = 0; indexx < 504; indexx++)
  { 
    digitalWrite(PIN_DC,HIGH);
    digitalWrite(PIN_SCE, LOW);
    shiftOut(PIN_SDIN, PIN_SCLK, MSBFIRST, Bitmap[indexx]);
    digitalWrite(PIN_SCE, HIGH);
  }
  
  if (buttonstate_M == LOW)
  {
    screen = 1;
    LcdClear();
    delay(200);
    egg();
    spawn_egg();
  }
  ////////////////////////////////////////////////////////////////flag
  //reset all values
  if (flag == true)
  { 
    kursorsp(px[0],py[0],0x00);
    x = 0; y = 0; dx = 0; dy = 0;
    skip = true;
    n = 2;
    garums = start_value;
    for(int num = 0; num<=100; num++)
    {
      px[num]=0;py[num]=0;
    }
      state_L = false;
      state_R = false;
      state_U = false;
      state_D = false;
  }
  
  }// screen 0  


if (screen == 1)
{
  int egg_pos_y, egg_pos_x;
  // egg_y sometimes not on the same position as displayed...
  egg_pos_x = egg_x;
  egg_pos_y = egg_y;

  
  if ((egg_pos_x == x | egg_pos_x-1 == x | egg_pos_x+1 == x ) && (egg_pos_y == py[i]))
  {
    garums = garums+1;
    egg();
    spawn_egg();
  }

  
// pogu apstraade.
////////////////////////////////////////// button states to determine which way snake is going
if ((!digitalRead(BUTTON_L)) && (state_R == false))
{
  dx=-2; dy= 0;// garums = garums+1;
  state_L = true;
  state_R = false;
  state_U = false;
  state_D = false;
  skip = false;
}
if ((!digitalRead(BUTTON_R)) && (state_L == false))
{
  dx= 2; dy= 0;//garums = garums+1;
  state_R = true;
  state_L = false;
  state_U = false;
  state_D = false;
  skip = false;
}
if ((!digitalRead(BUTTON_U)) && (state_D == false))
{
  dx= 0; dy= 1;//garums = garums+1;
  state_U = true;
  state_D = false;
  state_L = false;
  state_R = false;
  skip = false;
}
if ((!digitalRead(BUTTON_D)) && (state_U == false))
{
  dx= 0; dy=-1;//garums = garums+1;
  state_D = true;
  state_U = false;
  state_L = false;
  state_R = false;
  skip = false;
}
// cuskas garuma nodrosinaajums
//garums = 5;//cuskas garums
if (garums > 84)
{
  garums = 84;
}
  
for(i=0;i<garums;i++)
{ 
px[i]=px[i+1];
py[i]=py[i+1];//masiivs kas glabaa cuskas iepriekshejas vertiibas
}

px[garums] = x;
py[garums] = y;

// cuskas parvietojums
if (x+dx<0)
{x=83;} 
else if (x+dx>83)
{x=0;} 
else
{x=x+dx;}
if (y+dy<0) 
{y=6*4-1;} 
else if (y+dy>6*4-1) 
{y=0;} 
else 
{y=y+dy;}
// korrektaa atteloshana paarvietojoties pa x,y
kursorspp2(x,y,dy);

  //////////////////+++++++++++++++//////////////////////////////////////+++++++++++++//////////////////////// papildinaats kods
if (skip == false)
{
  
  if(n<0)
  {
for(kk=1; kk<=garums; kk++)
{ 

  if ((px[i] == px[i-kk]) && (py[i]==py[i-kk]))  // && y == py[i])
  {
    // nepieciesama restart funkcija
    screen = 0;
    flag = true;
    char state = LOW;
    for(char led=0; led<5; led++)
    {
        state = !state;
        digitalWrite(PIN_LED, state);
        delay(100);
    }
    digitalWrite(PIN_LED, LOW);
  }
  }
  }
  else
  {n--;}


}

spawn_egg();

Serial.println("test");
Serial.println(egg_x);
Serial.println(x);
Serial.println(egg_y);
Serial.println(y);

delay(200);
//tirishana
//++++++++++++++++++++++++++
kursorsp(px[0],py[0],0x00);
 
  buttonstate_M = digitalRead(Button_M);
  if (buttonstate_M == LOW)
  {
    screen = 2;
    position(0,0);
    delay(500);
  }
}
//////////////////////////////////////////////////////////// pievienotais kods
if (screen == 2)
{
  //// kods pause screenam
  const unsigned char Bitmap2[] = { 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x41, 0x41, 0x41, 0x41, 0x22, 0x1e, 0x00, 0x80, 0xe0, 0xbc, 0x87, 0x83, 0x9e, 0xf0, 0xc0, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x0e, 0x11, 0x31, 0x21, 0x21, 0x42, 0xc0, 0x00, 0x00, 0xff, 0x21, 0x21, 0x21, 0x21, 0x01, 0x00, 0x00, 0x00, 0xff, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02, 0x06, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x06, 0x00, 0x00, 0x01, 0x02, 0x04, 0x04, 0x04, 0x04, 0x04, 0x02, 0x01, 0x00, 0x00, 0x02, 0x04, 0x04, 0x04, 0x04, 0x02, 0x03, 0x00, 0x00, 0x07, 0x04, 0x04, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00, 0x07, 0x04, 0x04, 0x04, 0x04, 0x04, 0x02, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
  for (int indexx = 0; indexx < 504; indexx++)
  { 
    digitalWrite(PIN_DC,HIGH);
    digitalWrite(PIN_SCE, LOW);
    shiftOut(PIN_SDIN, PIN_SCLK, MSBFIRST, Bitmap2[indexx]);
    digitalWrite(PIN_SCE, HIGH);
  }
  /////
  buttonstate_M = digitalRead(Button_M);
  if (buttonstate_M == LOW)
  {
    screen = 1;
    LcdClear();
    spawn_egg();
    delay(200);
  }
}

} // loop brackets
